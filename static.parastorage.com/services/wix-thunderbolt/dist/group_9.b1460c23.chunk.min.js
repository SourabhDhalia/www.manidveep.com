(self.webpackJsonp__wix_thunderbolt_app = self.webpackJsonp__wix_thunderbolt_app || []).push([
    [1232], {
        45189: (e, t, a) => {
            e.exports = a(10145)
        },
        10145: (e, t) => {
            ! function(e) {
                "use strict";
                e.stringify = function e(t) {
                    function a(e) {
                        return /[^\w-.]/.test(e) ? e.replace(/[^\w-.]/g, (function(e) {
                            return "$" === e ? "!" : (e = e.charCodeAt(0)) < 256 ? "*" + ("00" + e.toString(16)).slice(-2) : "**" + ("0000" + e.toString(16)).slice(-4)
                        })) : e
                    }
                    var i;
                    switch (typeof t) {
                        case "number":
                            return isFinite(t) ? "~" + t : "~null";
                        case "boolean":
                            return "~" + t;
                        case "string":
                            return "~'" + a(t);
                        case "object":
                            if (!t) return "~null";
                            if (i = [], Array.isArray(t)) {
                                for (var o = 0; o < t.length; o++) i[o] = e(t[o]) || "~null";
                                return "~(" + (i.join("") || "~") + ")"
                            }
                            for (var s in t)
                                if (t.hasOwnProperty(s)) {
                                    var n = e(t[s]);
                                    n && i.push(a(s) + n)
                                }
                            return "~(" + i.join("~") + ")";
                        default:
                            return
                    }
                };
                var t = {
                    true: !0,
                    false: !1,
                    null: null
                };
                e.parse = function(e) {
                    if (!e) return e;
                    e = e.replace(/%(25)*27/g, "'");
                    var a = 0,
                        i = e.length;

                    function o(t) {
                        if (e.charAt(a) !== t) throw new Error("bad JSURL syntax: expected " + t + ", got " + (e && e.charAt(a)));
                        a++
                    }

                    function s() {
                        for (var t, o = a, s = ""; a < i && "~" !== (t = e.charAt(a)) && ")" !== t;) switch (t) {
                            case "*":
                                o < a && (s += e.substring(o, a)), "*" === e.charAt(a + 1) ? (s += String.fromCharCode(parseInt(e.substring(a + 2, a + 6), 16)), o = a += 6) : (s += String.fromCharCode(parseInt(e.substring(a + 1, a + 3), 16)), o = a += 3);
                                break;
                            case "!":
                                o < a && (s += e.substring(o, a)), s += "$", o = ++a;
                                break;
                            default:
                                a++
                        }
                        return s + e.substring(o, a)
                    }
                    return function n() {
                        var r, c, l;
                        switch (o("~"), c = e.charAt(a)) {
                            case "(":
                                if (a++, "~" === e.charAt(a))
                                    if (r = [], ")" === e.charAt(a + 1)) a++;
                                    else
                                        do {
                                            r.push(n())
                                        } while ("~" === e.charAt(a));
                                else if (r = {}, ")" !== e.charAt(a))
                                    do {
                                        r[s()] = n()
                                    } while ("~" === e.charAt(a) && ++a);
                                o(")");
                                break;
                            case "'":
                                a++, r = s();
                                break;
                            default:
                                for (l = a++; a < i && /[^)~]/.test(e.charAt(a));) a++;
                                var d = e.substring(l, a);
                                if (/[\d\-]/.test(c)) r = parseFloat(d);
                                else if (void 0 === (r = t[d])) throw new Error("bad value keyword: " + d)
                        }
                        return r
                    }()
                }, e.tryParse = function(t, a) {
                    try {
                        return e.parse(t)
                    } catch (e) {
                        return a
                    }
                }
            }(t)
        },
        72610: (e, t, a) => {
            "use strict";
            a.r(t), a.d(t, {
                AUTH_RESULT_REASON: () => v.qd,
                BIEvents: () => U,
                INTERACTIONS: () => v.sH,
                PrivacyStatus: () => fe.lS,
                PrivacyStatusStatus: () => I,
                Role: () => N,
                SiteMembersApiSymbol: () => _.Np,
                Status: () => R,
                TpaPage: () => O,
                getCaptchaSettings: () => T.YG,
                isLoginAcceptableError: () => T.qi,
                isSignupAcceptableError: () => T.NU,
                memberDetailsFromDTO: () => T.Yv,
                page: () => Ze,
                site: () => Qe
            });
            var i = a(77748),
                o = a(20590),
                s = a(32777),
                n = a(32166),
                r = a(87711),
                c = a(6623),
                l = a(9492),
                d = a(75396),
                u = a(10553),
                g = a(79435),
                m = a(39063),
                p = a(77597),
                h = a(82658),
                S = a(46745),
                E = a(63386),
                w = a(71085),
                P = a(73896),
                C = a(45117),
                b = a(45156),
                f = a(45189),
                D = a.n(f);
            var y = a(62155),
                v = a(66397),
                _ = a(19889);
            class A {
                constructor(e, t, a, i, o) {
                    this.propsStore = e, this.structureApi = t, this.siteScrollBlocker = a, this.browserWindow = i, this.cyclicTabbing = o, this.prevCompIds = []
                }
                async displayDialog(e, t, a, i) {
                    (0, h.fU)(this.browserWindow) || (this.activeElementBeforeShowDialog = this.browserWindow.document.activeElement);
                    const o = (0, y.uniqueId)(_.RG);
                    this.propsStore.update({
                        [o]: { ...t,
                            ...a
                        }
                    }), this.currentCompId && this.cyclicTabbing.disableCyclicTabbing(this.currentCompId), this.cyclicTabbing.enableCyclicTabbing(o), await this.structureApi.addComponentToDynamicStructure(o, {
                        componentType: e,
                        components: []
                    }), this.currentCompId && (i ? this.prevCompIds.push(this.currentCompId) : (this.structureApi.removeComponentFromDynamicStructure(this.currentCompId), this.siteScrollBlocker.setSiteScrollingBlocked(!1, this.currentCompId))), this.siteScrollBlocker.setSiteScrollingBlocked(!0, o), this.currentCompId = o
                }
                hideDialog(e) {
                    if (this.currentCompId) {
                        if (this.removeComponentFromDynamicStructure(this.currentCompId), e)
                            for (; this.prevCompIds.length > 0;) this.removeComponentFromDynamicStructure(this.prevCompIds.pop());
                        this.currentCompId = this.prevCompIds.pop()
                    }(0, h.fU)(this.browserWindow) || (this.activeElementBeforeShowDialog ? .focus(), this.activeElementBeforeShowDialog = null)
                }
                removeComponentFromDynamicStructure(e) {
                    this.structureApi.removeComponentFromDynamicStructure(e), this.siteScrollBlocker.setSiteScrollingBlocked(!1, e), this.cyclicTabbing.disableCyclicTabbing(e)
                }
            }
            var I, R, N, O;
            ! function(e) {
                e.UNKNOWN = "UNKNOWN", e.PRIVATE = "PRIVATE", e.PUBLIC = "PUBLIC"
            }(I || (I = {})),
            function(e) {
                e.UNKNOWN = "UNKNOWN", e.PENDING = "PENDING", e.APPROVED = "APPROVED", e.BLOCKED = "BLOCKED", e.OFFLINE = "OFFLINE"
            }(R || (R = {})),
            function(e) {
                e.UNDEFINED_ROLE = "UNDEFINED_ROLE", e.MEMBER = "MEMBER", e.OWNER = "OWNER", e.CONTRIBUTOR = "CONTRIBUTOR"
            }(N || (N = {})),
            function(e) {
                e.EXPIRED_RESET_LINK = "EXPIRED_RESET_LINK", e.ADMIN_APPROVAL = "ADMIN_APPROVAL", e.NO_PERMISSIONS = "NO_PERMISSIONS", e.LOGIN = "LOGIN", e.FORGOT_PASSWORD = "FORGOT_PASSWORD", e.RESET_PASSWORD = "RESET_PASSWORD", e.EMAIL_CONFIRMATION = "EMAIL_CONFIRMATION"
            }(O || (O = {}));
            var T = a(65788),
                L = a(8145),
                k = a(98323);
            const U = ({
                    sessionManager: e,
                    businessLogger: t,
                    wixBiSession: a,
                    viewMode: i,
                    language: o
                }) => {
                    const s = (t, s) => ({
                        biToken: a.msId,
                        context: t,
                        ts: M(a),
                        viewmode: i,
                        visitor_id: e.getVisitorId(),
                        site_member_id: e.getSiteMemberId(),
                        vsi: a.viewerSessionId,
                        site_settings_lng: o.siteLanguage,
                        browser_lng: o.userLanguage,
                        lng_mismatch: o.siteLanguage !== o.userLanguage,
                        layout: s
                    });
                    return {
                        loginOrSignUpDialogLoaded: (e, a = "fullscreen") => {
                            t.logger.log({
                                src: 5,
                                evid: 658,
                                ...s(e, a)
                            }, {
                                endpoint: "site-members"
                            })
                        },
                        closingDialog: (e, a = "fullscreen") => {
                            t.logger.log({
                                src: 5,
                                evid: 602,
                                form_type: "default",
                                ...s(e, a)
                            }, {
                                endpoint: "site-members"
                            })
                        },
                        emailAuthSubmitClicked: (e, a) => {
                            t.logger.log({
                                src: 5,
                                evid: 603,
                                form_type: "default",
                                ...s(e, a)
                            }, {
                                endpoint: "site-members"
                            })
                        },
                        siteMembersFeatureLoaded: () => {
                            t.logger.log({
                                src: 5,
                                evid: 698,
                                ...s()
                            }, {
                                endpoint: "site-members"
                            })
                        },
                        siteMembersSdkFeatureLoaded: () => {
                            t.logger.log({
                                src: 5,
                                evid: 699,
                                ...s()
                            }, {
                                endpoint: "site-members"
                            })
                        },
                        siteMembersEmailConfirmationNewMembersModalLoad: () => {
                            t.logger.log({
                                src: 5,
                                evid: 1809,
                                ...s()
                            }, {
                                endpoint: "site-members"
                            })
                        },
                        siteMembersEmailConfirmationSendCodeClick: () => {
                            t.logger.log({
                                src: 5,
                                evid: 1810,
                                ...s()
                            }, {
                                endpoint: "site-members"
                            })
                        },
                        siteMembersEmailConfirmationOnResendCodeClick: () => {
                            t.logger.log({
                                src: 5,
                                evid: 1811,
                                ...s()
                            }, {
                                endpoint: "site-members"
                            })
                        },
                        cachePrediction: () => {
                            t.logger.log({
                                src: 5,
                                evid: 1726,
                                ...s()
                            }, {
                                endpoint: "site-members"
                            })
                        }
                    }
                },
                M = e => {
                    const t = e.initialTimestamp || 0;
                    return Date.now() - t
                },
                V = {
                    isCloseable: !0,
                    returnPages: !1
                };
            class B {
                constructor(e, t) {
                    this.shouldRunCustomPopupCloseCallback = !0, this.popups = e, this.onReset = t, this.config = V
                }
                async openPopupPage(e, t) {
                    const a = this.shouldRunCustomPopupCloseCallback;
                    this.preventCustomPopupCloseCallback(), await (this.popups ? .open(e, (() => {
                        this.shouldRunCustomPopupCloseCallback && (this.rejectAuthenticationRequest(), t && t())
                    }))), this.shouldRunCustomPopupCloseCallback = a
                }
                preventCustomPopupCloseCallback() {
                    this.shouldRunCustomPopupCloseCallback = !1
                }
                allowCustomPopupCloseCallback() {
                    this.shouldRunCustomPopupCloseCallback = !0
                }
                assignRequestAuthenticationRejection(e) {
                    this.requestAuthenticationRejectInstance = this.requestAuthenticationRejectInstance || e
                }
                assignRequestAuthenticationResolveInstance(e) {
                    this.requestAuthenticationResolveInstance = this.requestAuthenticationResolveInstance || e
                }
                assignRequestAuthenticationPromise(e, t) {
                    this.requestAuthenticationRejectInstance = this.requestAuthenticationRejectInstance || t, this.requestAuthenticationResolveInstance = this.requestAuthenticationResolveInstance || e
                }
                rejectAuthenticationRequest() {
                    this.requestAuthenticationRejectInstance && (this.requestAuthenticationRejectInstance(v.qd.CANCELED), this.reset())
                }
                resolveAuthenticationRequest(e) {
                    this.requestAuthenticationRejectInstance && (this.requestAuthenticationResolveInstance(e), this.reset())
                }
                setConfig({
                    isCloseable: e = !0,
                    returnPages: t = !1
                }) {
                    this.config = {
                        isCloseable: e,
                        returnPages: t
                    }
                }
                reset() {
                    this.onReset ? .(), this.requestAuthenticationRejectInstance = void 0, this.requestAuthenticationResolveInstance = void 0, this.config = V
                }
            }
            var F, q, $, W, x, G, H, j = a(15772),
                K = a(73699),
                J = {},
                z = {
                    memberPrivacySettings: "_memberPrivacySettings"
                },
                Y = {
                    updatedDate: "google.protobuf.Timestamp"
                };

            function X(e) {
                return (0, j.O2)(Object.assign(e, {
                    domainToMappings: {
                        "editor.wixapps.net": [{
                            srcPath: "/_api/members/v1/privacy-settings",
                            destPath: "/v1/privacy-settings"
                        }],
                        "api._api_base_domain_": [{
                            srcPath: "/members/v1/privacy-settings",
                            destPath: ""
                        }],
                        "manage._base_domain_": [{
                            srcPath: "/_api/members/v1/privacy-settings",
                            destPath: "/v1/privacy-settings"
                        }],
                        "editor._base_domain_": [{
                            srcPath: "/_api/members/v1/privacy-settings",
                            destPath: "/v1/privacy-settings"
                        }],
                        "blocks._base_domain_": [{
                            srcPath: "/_api/members/v1/privacy-settings",
                            destPath: "/v1/privacy-settings"
                        }],
                        "create.editorx": [{
                            srcPath: "/_api/members/v1/privacy-settings",
                            destPath: "/v1/privacy-settings"
                        }],
                        "www.wixapis.com": [{
                            srcPath: "/members/v1/privacy-settings",
                            destPath: "/v1/privacy-settings"
                        }],
                        _: [{
                            srcPath: "/_api/members/v1/privacy-settings",
                            destPath: "/v1/privacy-settings"
                        }],
                        "www._base_domain_": [{
                            srcPath: "/_api/members/v1/privacy-settings",
                            destPath: "/v1/privacy-settings"
                        }],
                        "*.dev.wix-code.com": [{
                            srcPath: "/_api/members/v1/privacy-settings",
                            destPath: "/v1/privacy-settings"
                        }],
                        "bo._base_domain_": [{
                            srcPath: "/_api/members/v1/privacy-settings",
                            destPath: "/v1/privacy-settings"
                        }],
                        "wixbo.ai": [{
                            srcPath: "/_api/members/v1/privacy-settings",
                            destPath: "/v1/privacy-settings"
                        }],
                        "apps._base_domain_": [{
                            srcPath: "/_api/members/v1/privacy-settings",
                            destPath: "/v1/privacy-settings"
                        }]
                    }
                }))
            }! function(e) {
                e.UNKNOWN = "UNKNOWN", e.VISIBLE_TO_MEMBERS_ONLY = "VISIBLE_TO_MEMBERS_ONLY", e.VISIBLE_TO_ALL = "VISIBLE_TO_ALL"
            }(F || (F = {})),
            function(e) {
                e.UNKNOWN = "UNKNOWN", e.NO_ONE = "NO_ONE", e.ANYONE = "ANYONE"
            }(q || (q = {})),
            function(e) {
                e.UNKNOWN = "UNKNOWN", e.ENABLED = "ENABLED", e.DISABLED = "DISABLED", e.PENDING = "PENDING", e.DEMO = "DEMO"
            }($ || ($ = {})),
            function(e) {
                e.OTHER = "OTHER", e.FROM_TEMPLATE = "FROM_TEMPLATE", e.DUPLICATE_BY_SITE_TRANSFER = "DUPLICATE_BY_SITE_TRANSFER", e.DUPLICATE = "DUPLICATE", e.OLD_SITE_TRANSFER = "OLD_SITE_TRANSFER", e.FLASH = "FLASH"
            }(W || (W = {})),
            function(e) {
                e.UNKNOWN_NAMESPACE = "UNKNOWN_NAMESPACE", e.WIX = "WIX", e.SHOUT_OUT = "SHOUT_OUT", e.ALBUMS = "ALBUMS", e.WIX_STORES_TEST_DRIVE = "WIX_STORES_TEST_DRIVE", e.HOTELS = "HOTELS", e.CLUBS = "CLUBS", e.ONBOARDING_DRAFT = "ONBOARDING_DRAFT", e.DEV_SITE = "DEV_SITE", e.LOGOS = "LOGOS", e.VIDEO_MAKER = "VIDEO_MAKER", e.PARTNER_DASHBOARD = "PARTNER_DASHBOARD", e.DEV_CENTER_COMPANY = "DEV_CENTER_COMPANY", e.HTML_DRAFT = "HTML_DRAFT", e.SITELESS_BUSINESS = "SITELESS_BUSINESS", e.CREATOR_ECONOMY = "CREATOR_ECONOMY", e.DASHBOARD_FIRST = "DASHBOARD_FIRST", e.ANYWHERE = "ANYWHERE", e.HEADLESS = "HEADLESS", e.ACCOUNT_MASTER_CMS = "ACCOUNT_MASTER_CMS", e.RISE = "RISE", e.BRANDED_FIRST = "BRANDED_FIRST"
            }(x || (x = {})),
            function(e) {
                e.UNKNOWN = "UNKNOWN", e.TRASH = "TRASH", e.DELETED = "DELETED", e.PENDING_PURGE = "PENDING_PURGE"
            }(G || (G = {})),
            function(e) {
                e.UNKNOWN = "UNKNOWN", e.ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR", e.MEMBER = "MEMBER", e.WIX_USER = "WIX_USER", e.APP = "APP"
            }(H || (H = {}));
            const Q = e => {
                    const t = e.joinCommunityCheckedByDefault ? ? !0,
                        a = e.privacyNoteType ? ? "CHECKBOX";
                    return t ? a : "CHECKBOX"
                },
                Z = e => "NOTE" === Q(e) || (e.joinCommunityCheckedByDefault ? ? !0),
                ee = async (e, t) => {
                    const {
                        data: a
                    } = await e.request(function(e) {
                        var t = (0, K.d)(J, {}),
                            a = t.toJSON,
                            i = t.fromJSON,
                            o = (0, K.d)(z, {
                                _memberPrivacySettings: Y
                            }).fromJSON;

                        function s(t) {
                            var i = t.host,
                                s = a(e);
                            return {
                                entityFqdn: "wix.members.v1.member_privacy_settings",
                                method: "GET",
                                methodFqn: "com.wixpress.members.memberprivacysettings.MemberPrivacySettingsService.GetMemberPrivacySettings",
                                url: X({
                                    protoPath: "/v1/privacy-settings",
                                    data: s,
                                    host: i
                                }),
                                params: (0, j.bU)(s),
                                transformResponse: o
                            }
                        }
                        return s.fromReq = i, s.__isAmbassador = !0, s
                    }({}), {
                        signedInstance: t
                    });
                    return a.memberPrivacySettings
                },
                te = {
                    [R.APPROVED]: "ACTIVE",
                    [R.PENDING]: "PENDING"
                },
                ae = ({
                    member: e,
                    role: t
                }) => {
                    return {
                        id: e ? .id ? ? "",
                        contactId: e ? .contactId ? ? "",
                        loginEmail: e ? .loginEmail ? ? "",
                        imageUrl: e ? .profile ? .photo ? .url ? ? "",
                        nickname: e ? .profile ? .nickname ? ? "",
                        profilePrivacyStatus: e ? .privacyStatus ? ? "",
                        slug: e ? .profile ? .slug ? ? "",
                        status: (i = e ? .status, i ? te[i] ? ? "APPLICANT" : "APPLICANT"),
                        creationDate: e ? .createdDate ? ? "",
                        lastUpdateDate: e ? .updatedDate ? ? "",
                        lastLoginDate: e ? .lastLoginDate ? ? "",
                        emailVerified: e ? .loginEmailVerified ? ? !1,
                        role: t ? ? "MEMBER",
                        owner: t === N.OWNER,
                        firstName: e ? .contact ? .firstName ? ? "",
                        lastName: e ? .contact ? .lastName ? ? "",
                        memberName: (a = e ? .contact, `${a?.firstName??""} ${a?.lastName??""}`.trim()),
                        groups: void 0,
                        emails: void 0,
                        phones: void 0,
                        addresses: void 0,
                        labels: void 0,
                        customFields: void 0
                    };
                    var a, i
                };
            var ie = a(65064),
                oe = {
                    numValue: "DOUBLE",
                    dateValue: "google.protobuf.Timestamp",
                    listValue: "_commonListValue",
                    mapValue: "_commonMapValue"
                },
                se = {
                    value: "_commonCustomValue"
                },
                ne = {
                    value: "Map#_commonCustomValue"
                },
                re = {
                    value: "_customValue"
                },
                ce = {
                    numValue: "DOUBLE",
                    dateValue: "google.protobuf.Timestamp",
                    listValue: "_listValue",
                    mapValue: "_mapValue"
                },
                le = {
                    createdDate: "google.protobuf.Timestamp",
                    updatedDate: "google.protobuf.Timestamp",
                    identityProfile: "_identityProfile"
                },
                de = {
                    customFields: "_customField"
                },
                ue = {
                    value: "_customValue"
                },
                ge = {},
                me = {},
                pe = {
                    value: "Map#_customValue"
                },
                he = {
                    body: "BYTES"
                },
                Se = {
                    profile: "_identityProfile"
                },
                Ee = {
                    identity: "_identity",
                    additionalData: "Map#_commonCustomValue"
                };

            function we(e) {
                return (0, j.O2)(Object.assign(e, {
                    domainToMappings: {
                        _: [{
                            srcPath: "/_api/iam/authentication",
                            destPath: ""
                        }],
                        "users._base_domain_": [{
                            srcPath: "/iam/wix/google",
                            destPath: "/v1/sso/callback/root/0e6a50f5-b523-4e29-990d-f37fa2ffdd69"
                        }, {
                            srcPath: "/authentication",
                            destPath: ""
                        }],
                        "www.wixapis.com": [{
                            srcPath: "/_api/iam/authentication",
                            destPath: ""
                        }],
                        "bo._base_domain_": [{
                            srcPath: "/_api/iam/authentication",
                            destPath: ""
                        }],
                        "wixbo.ai": [{
                            srcPath: "/_api/iam/authentication",
                            destPath: ""
                        }],
                        "dev._base_domain_": [{
                            srcPath: "/_api/iam/authentication",
                            destPath: ""
                        }],
                        "manage._base_domain_": [{
                            srcPath: "/_api/authentication",
                            destPath: ""
                        }],
                        "www._base_domain_": [{
                            srcPath: "/_api/iam/authentication",
                            destPath: ""
                        }]
                    }
                }))
            }
            var Pe = {},
                Ce = {
                    body: "BYTES"
                };

            function be(e) {
                return (0, j.O2)(Object.assign(e, {
                    domainToMappings: {
                        "manage._base_domain_": [{
                            srcPath: "/_api/cookie",
                            destPath: ""
                        }],
                        _: [{
                            srcPath: "/_api/iam/cookie",
                            destPath: ""
                        }],
                        "bo._base_domain_": [{
                            srcPath: "/_api/iam/cookie",
                            destPath: ""
                        }],
                        "wixbo.ai": [{
                            srcPath: "/_api/iam/cookie",
                            destPath: ""
                        }],
                        "www._base_domain_": [{
                            srcPath: "/_api/iam/cookie",
                            destPath: ""
                        }],
                        "dev._base_domain_": [{
                            srcPath: "/_api/iam/cookie",
                            destPath: ""
                        }]
                    }
                }))
            }
            var fe = a(82884),
                De = {
                    numValue: "DOUBLE",
                    dateValue: "google.protobuf.Timestamp",
                    listValue: "_commonListValue",
                    mapValue: "_commonMapValue"
                },
                ye = {
                    value: "_commonCustomValue"
                },
                ve = {
                    value: "Map#_commonCustomValue"
                },
                _e = {
                    value: "_customValue"
                },
                Ae = {
                    numValue: "DOUBLE",
                    dateValue: "google.protobuf.Timestamp",
                    listValue: "_listValue",
                    mapValue: "_mapValue"
                },
                Ie = {
                    createdDate: "google.protobuf.Timestamp",
                    updatedDate: "google.protobuf.Timestamp",
                    identityProfile: "_identityProfile"
                },
                Re = {
                    customFields: "_customField"
                },
                Ne = {
                    value: "_customValue"
                },
                Oe = {
                    value: "Map#_customValue"
                },
                Te = {
                    identity: "_identity",
                    additionalData: "Map#_commonCustomValue"
                },
                Le = {};

            function ke(e) {
                return (0, j.O2)(Object.assign(e, {
                    domainToMappings: {
                        "www.wixapis.com": [{
                            srcPath: "/_api/iam/verification",
                            destPath: ""
                        }],
                        _: [{
                            srcPath: "/_api/iam/verification",
                            destPath: ""
                        }],
                        "www._base_domain_": [{
                            srcPath: "/_api/iam/verification",
                            destPath: ""
                        }]
                    }
                }))
            }

            function Ue(e) {
                var t = (0, K.d)(Le, {}),
                    a = t.toJSON,
                    i = t.fromJSON,
                    o = (0, K.d)(Te, {
                        _commonCustomValue: De,
                        _commonListValue: ye,
                        _commonMapValue: ve,
                        _customField: _e,
                        _customValue: Ae,
                        _identity: Ie,
                        _identityProfile: Re,
                        _listValue: Ne,
                        _mapValue: Oe
                    }).fromJSON;

                function s(t) {
                    var i = t.host,
                        s = a(e);
                    return {
                        entityFqdn: "wix.iam.verification.v1.start_response",
                        method: "POST",
                        methodFqn: "wix.iam.verification.v1.VerificationService.VerifyDuringAuthentication",
                        url: ke({
                            protoPath: "/v1/auth/verify",
                            data: s,
                            host: i
                        }),
                        data: s,
                        transformResponse: o
                    }
                }
                return s.fromReq = i, s.__isAmbassador = !0, s
            }
            var Me = a(93425);
            const Ve = e => new Promise((async (t, a) => {
                    const i = window.crypto.randomUUID(),
                        o = await window.crypto.subtle.generateKey({
                            name: "AES-GCM",
                            length: 256
                        }, !0, ["encrypt", "decrypt"]),
                        s = Be(new Uint8Array(await window.crypto.subtle.exportKey("raw", o))),
                        n = new BroadcastChannel(`wix-idp-${i}`);
                    n.addEventListener("message", (async e => {
                        const {
                            data: i
                        } = e, {
                            iv: s,
                            data: r
                        } = i, c = await window.crypto.subtle.decrypt({
                            name: "AES-GCM",
                            iv: s
                        }, o, r), l = JSON.parse((new TextDecoder).decode(c));
                        l.error ? a(l.error) : t(JSON.parse(l.response)), n.postMessage(await Fe(o)), n.close()
                    }));
                    const r = qe(e, i, s);
                    window.open(r, "oauthPopup", "width=450,height=522")
                })),
                Be = e => btoa(Array(e.length).fill("").map(((t, a) => String.fromCharCode(e[a]))).join("")),
                Fe = async e => {
                    const t = window.crypto.getRandomValues(new Uint8Array(12));
                    return {
                        iv: t,
                        data: await window.crypto.subtle.encrypt({
                            name: "AES-GCM",
                            iv: t
                        }, e, (new TextEncoder).encode("close"))
                    }
                },
                qe = (e, t, a) => {
                    const i = $e({
                        sessionId: t,
                        encryptionKey: a
                    });
                    try {
                        const t = new URL(e);
                        return We(t, i)
                    } catch {
                        return `${e}&${i.toString()}`
                    }
                },
                $e = e => {
                    const t = new URLSearchParams;
                    for (const a in e) e.hasOwnProperty(a) && t.append(a, e[a].toString());
                    return t
                },
                We = (e, t) => {
                    const a = e.searchParams;
                    for (const [e, i] of t) a.append(e, i);
                    return e.toString()
                },
                xe = e => e ? "PUBLIC" : "PRIVATE",
                Ge = (e, t, a) => {
                    document.cookie = `${e}=;max-age=0`, document.cookie = `${e}=;max-age=0;path=${t}`, document.cookie = `${e}=;domain=${a};max-age=0`, document.cookie = `${e}=;domain=${a};max-age=0;path=${t}`
                },
                He = (0, i.Og)([(0, i.KT)(o.YG, _.UU), (0, i.KT)(o._K, _.UU), (0, i.KT)(o.wk, _.UU), (0, i.KT)(o.AF, _.UU), s.F, n.Ht, n.TQ, E.i$, r.Ji, r.eZ, n.dn, n.RV, w.Ix, (0, i.lq)(P.j), w.$1, c.F, l.O$, (0, i.lq)(C.KK), (0, i.lq)(b.i), d.t7, u.n, (0, i.lq)(g.Z), (0, i.lq)(k.j), (0, i.lq)(L.U), (0, i.lq)(Me.gB)], ((e, t, a, i, o, s, n, r, c, l, d, u, g, E, w, P, C, b, f = {
                    trackEvent: () => 0,
                    register: () => () => {}
                }, _, I, R, L, k, M) => {
                    const V = (0, m.o)(),
                        {
                            loginSocialBarOnSite: F,
                            protectedHomepage: $,
                            smSessionCookie: W,
                            memberInfoAppId: x,
                            membersInfoAppDefId: G,
                            smcollectionId: H,
                            isTemplate: J,
                            routerPrefix: z
                        } = e;
                    let {
                        sm_efCookie: Y
                    } = e;
                    const X = "22bef345-3c5b-4c18-b782-74d4085112ff",
                        te = r.getUserSession(),
                        De = () => r.getAppInstanceByAppDefId(X) || "",
                        ye = () => (0, T.YA)(r),
                        ve = I["specs.thunderbolt.deprecateAppId"],
                        _e = I["specs.ident.usePlatformizedSMAuth"],
                        Ae = I["specs.thunderbolt.addPlatformizationOptionLoginFlow"],
                        Ie = I["specs.thunderbolt.addPlatformizationOptionSignUpFlow"],
                        Re = I["specs.thunderbolt.useSiteMemberIdInsteadOfSmToken2ndAttempt"],
                        Ne = I["specs.thunderbolt.shouldSearchForRouterPrefix"],
                        Oe = !!I["specs.thunderbolt.useUrlFromBrowserWindowInsteadOfViewerModel"],
                        Te = () => !!(Re && r.getSiteMemberId() || r.getSmToken()),
                        {
                            smSettings: Le,
                            tpaAppDefinitionIds: ke,
                            tpaApplicationIds: Me,
                            tpaPageIds: Be,
                            policyLinks: Fe,
                            translations: qe
                        } = t,
                        $e = ve ? ke[G] : x && Me[x],
                        {
                            metaSiteId: He,
                            externalBaseUrl: je,
                            siteId: Ke,
                            siteRevision: Je
                        } = n.site,
                        ze = n.requestUrl,
                        Ye = n.viewMode,
                        Xe = n.anywhereConfig ? .siteId ? ? Ke,
                        Qe = n.anywhereConfig ? .revision ? ? Je,
                        Ze = -1 !== v.UG.findIndex((e => u ? .navigator ? .userAgent ? .includes(e))),
                        et = !Ze,
                        tt = !Ze,
                        at = `/_api/wix-sm-webapp/tokens/verify/${He}/${Xe}`,
                        it = `${je.replace(/\/$/,"")}/api/wix-sm/v1/authorize/${Xe}/pages`,
                        ot = `/_api/wix-sm-webapp/tokens/logout/${He}`,
                        st = `/_api/wix-sm-webapp/member/changePasswordWithMailToken?metaSiteId=${He}&collectionId=${H}`,
                        nt = "/_api/iam/state-machine-service",
                        rt = Le.smFirstDialogLogin ? "login" : "signup",
                        {
                            socialLoginFacebookEnabled: ct,
                            socialLoginGoogleEnabled: lt,
                            termsOfUse: dt,
                            privacyPolicy: ut,
                            codeOfConduct: gt,
                            customSignUpPageId: mt,
                            customSignInPageId: pt
                        } = Le,
                        {
                            privacyNoteType: ht,
                            joinCommunityCheckedByDefault: St
                        } = (e => ({
                            privacyNoteType: Q(e),
                            joinCommunityCheckedByDefault: Z(e)
                        }))(Le);
                    let Et = {},
                        wt = W;
                    const Pt = Ne ? z : v.DZ,
                        Ct = {},
                        bt = {},
                        ft = U({
                            sessionManager: r,
                            businessLogger: P,
                            wixBiSession: C,
                            viewMode: Ye ? .toUpperCase(),
                            language: d
                        });
                    ft.siteMembersFeatureLoaded();
                    const Dt = {},
                        yt = (0, T.I5)(o, {
                            credentials: "same-origin",
                            headers: {
                                accept: "application/json",
                                "x-wix-site-revision": `${Qe}`,
                                "x-wix-client-artifact-id": "thunderbolt"
                            }
                        }, ze),
                        vt = (0, ie.u)({
                            isSSR: !1,
                            ...I["specs.thunderbolt.siteMembersMultilingualLanguage"] && d ? .isMultilingualEnabled ? {
                                multilingualOptions: {
                                    isPrimaryLanguage: M ? .isOriginalLanguage || !0,
                                    locale: M ? .currentLanguage.locale ? ? "en",
                                    lang: M ? .currentLanguage.languageCode ? ? "en"
                                }
                            } : {}
                        }),
                        _t = ((e, t) => {
                            let a;
                            return {
                                canHavePublicMembers: async () => a || (a = new Promise((async a => {
                                    const i = await ee(e, t()),
                                        o = i ? .publicMemberCandidates;
                                    a(o === q.ANYONE)
                                })), a)
                            }
                        })(vt, De),
                        At = ((e, t, a, i, o) => new A(e, t, a, i, o))(c, l, E, u, L),
                        It = new URL(ze).searchParams,
                        Rt = {};
                    It.forEach(((e, t) => {
                        Rt[t] = e
                    }));
                    const Nt = (e => {
                            let {
                                query: t
                            } = e;
                            const a = D().tryParse(null == t ? void 0 : t.headlessExternalUrls, {}) ? ? {};
                            return null == a ? void 0 : a.headlessClientId
                        })({
                            query: Rt
                        }),
                        Ot = ((e, t, a, i, o, s) => {
                            let n;
                            const r = "/_serverless/collection-settings-facade/get-settings",
                                c = async () => n || e(s ? `${r}?clientId=${s}` : r, {
                                    headers: {
                                        "Content-Type": "application/json",
                                        authorization: o()
                                    },
                                    credentials: "omit"
                                }).then((e => (n = e, n))),
                                l = async () => c().then((e => e.collectionSettings));
                            return {
                                getCombinedCollectionSettings: c,
                                getSiteMembersSettings: l,
                                getCaptchaSettings: () => l().then(T.YG).catch((e => (t.captureError(e, {
                                    tags: {
                                        feature: "site-members"
                                    }
                                }), a.trackEvent((0, v.SU)(v.WW.ACTIONS.SETTINGS.FAIL)), {
                                    invisible: {
                                        login: !1,
                                        signup: !1
                                    },
                                    visible: {
                                        login: !1,
                                        signup: !0
                                    }
                                }))),
                                getEnabledConnections: e => c().then((t => t.enabledConnections.filter((({
                                    appDefId: t
                                }) => !1 !== e[t])) ? ? [])),
                                getLoginRedirectUrl: () => c().then((e => e.loginUrl)),
                                getLogoutRedirectUrl: () => c().then((e => e.logoutUrl))
                            }
                        })(yt, s, f, 0, (() => De()), Nt),
                        Tt = (0, T.bR)(u),
                        Lt = (0, T.Ed)(u, V),
                        kt = new B(b, (async () => {
                            const e = await Ot.getCaptchaSettings();
                            (e.invisible.login || e.invisible.signup) && Lt.hideCaptchaBadge()
                        })),
                        Ut = k ? .getBsi(),
                        Mt = Ut ? Ut.split("|")[0] : "00000000-0000-0000-0000-000000000000",
                        Vt = e => {
                            s.interactionStarted(v.sH.SOCIAL_APP_LOGIN_WITH_VENDOR(e))
                        },
                        Bt = {
                            appDidMount() {},
                            async handleSocialLoginResponse(e, t, a = !1, i = !1) {
                                const o = v.UI[t] ? ? t;
                                s.interactionStarted(v.sH.SOCIAL_APP_LOGIN), s.interactionEnded(v.sH.SOCIAL_APP_LOGIN), s.interactionEnded(v.sH.SOCIAL_APP_LOGIN_WITH_VENDOR(o)), f.trackEvent((0, v.SU)(v.WW.ACTIONS.LOGIN.SUBMIT, o)), I["specs.thunderbolt.useNewPostLoginRedirect"] || (0, T.$0)(u, ze, {}, Oe);
                                const n = await Bt.handleIAMLoginResponseV1(e, a, i);
                                return f.trackEvent((0, v.SU)(v.WW.ACTIONS.LOGIN.SUCCESS, o)), n
                            },
                            async handleIAMLoginResponseV1(e, t = !1, a = !1) {
                                if (e.identity ? .status ? .name === fe.EH.PENDING) {
                                    if (_e) {
                                        const t = Be[v.$m.ADMIN_APPROVAL];
                                        if (t) return new Promise(((a, i) => {
                                            b ? .open(t, (() => {
                                                (0, T.$0)(u, ze, {
                                                    error: T.Mi.ACCESS_DENIED
                                                }, Oe), kt.rejectAuthenticationRequest(), i(v.qd.CANCELED), Bt.closeCustomAuthenticationDialogs(!1)
                                            }), {
                                                email: e.identity ? .email ? .address
                                            }).then((() => {
                                                At.hideDialog(!0)
                                            }))
                                        }))
                                    }
                                    return Bt.showAdminApprovalDialog(e.identity.email ? .address ? ? "")
                                }
                                const i = (0, T.N3)(e),
                                    o = e.sessionToken,
                                    s = (0, T.FB)(e.additionalData ? .protectedPages);
                                if ((0, T.$0)(u, ze, {
                                        sessionToken: o
                                    }, Oe) && I["specs.thunderbolt.useNewPostLoginRedirect"]) return (0, T.yw)();
                                const n = await Bt.applySessionToken(o, i, t && !s, a);
                                return {
                                    sessionToken: o,
                                    member: i,
                                    ...t ? {
                                        pages: s ? ? n
                                    } : {}
                                }
                            },
                            async promptLogin(e = {}, t = kt.config ? .isCloseable ? ? !0, a = kt.config ? .returnPages ? ? !1) {
                                const {
                                    mode: i,
                                    modal: o
                                } = e, s = "login" === (i ? ? rt), n = o ? "popup" : "fullscreen";
                                return J ? (await Bt.showNotificationDialog(qe.templateNotificationTitle, qe.templateNotificationMessage, qe.containerOk), Promise.reject(v.qd.CANCELED)) : (Lt.loadScript(d.userLanguage, v.c8), s ? Bt.showLoginDialog({
                                    isCloseable: t,
                                    displayMode: n,
                                    returnPages: a
                                }) : Bt.showSignUpDialog({
                                    isCloseable: t,
                                    displayMode: n,
                                    returnPages: a
                                }))
                            },
                            promptForgotPassword: (e = !0) => new Promise(((t, a) => {
                                kt.assignRequestAuthenticationPromise(t, a);
                                const i = {
                                        isCloseable: e,
                                        directionByLanguage: d.directionByLanguage,
                                        translations: qe
                                    },
                                    o = {
                                        async onCloseDialogCallback() {
                                            (0, T.Fy)(u, ze, Oe), ft.closingDialog("RequestResetPassword"), At.hideDialog(), kt.rejectAuthenticationRequest()
                                        },
                                        onSubmitCallback: e => Bt.sendResetPasswordEmail(e).then((async () => {
                                            const e = () => {
                                                (0, T.Fy)(u, ze, Oe), kt.resolveAuthenticationRequest(), a(v.qd.CANCELED)
                                            };
                                            Bt.showNotificationDialog(qe.resetPasswordCheckEmailTitle, qe.resetPasswordCheckEmailText, qe.resetPasswordOk, e, e)
                                        }))
                                    };
                                if (_e) {
                                    const e = Be[v.$m.FORGOT_PASSWORD];
                                    if (e) return b ? .open(e, (() => {
                                        (0, T.Fy)(u, ze, Oe), kt.resolveAuthenticationRequest(), a(v.qd.CANCELED)
                                    })).then((() => {
                                        At.hideDialog(!0)
                                    }))
                                }
                                At.displayDialog("RequestPasswordResetDialog", i, o)
                            })),
                            async requestAuthentication(e = {}) {
                                if (wt) return {
                                    success: !0,
                                    token: wt,
                                    reason: v.qd.ALREADY_LOGGED_IN
                                };
                                try {
                                    const t = !$,
                                        {
                                            sessionToken: a
                                        } = await Bt.promptLogin(e, t);
                                    return {
                                        success: !0,
                                        token: a,
                                        reason: v.qd.SUCCESS
                                    }
                                } catch (e) {
                                    return {
                                        success: !1,
                                        reason: e
                                    }
                                }
                            },
                            async requestAuthorizedPages(e = {}) {
                                if ((0, p.y)(s, r.getSiteMemberId(), r.getSmToken()), Te()) {
                                    return {
                                        success: !0,
                                        pages: await Bt.authorizeMemberPagesBySignedInstance(De())
                                    }
                                }
                                try {
                                    const t = !$;
                                    kt.setConfig({
                                        isCloseable: t,
                                        returnPages: !0
                                    });
                                    const a = await Bt.promptLogin(e, t, !0);
                                    return kt.reset(), {
                                        success: !0,
                                        pages: a.pages
                                    }
                                } catch (e) {
                                    return {
                                        success: !1,
                                        reason: e
                                    }
                                }
                            },
                            async applySessionToken(e, t, a = !1, o = !1) {
                                if ((0, h.fU)(u)) throw v.Nw;
                                let n;
                                if (s.interactionStarted(v.sH.VERIFY_TOKEN), o) await r.loadNewSession({
                                    reason: "memberLogin",
                                    authorizationCode: e
                                });
                                else {
                                    const t = await vt.request(function(e) {
                                        var t = (0, K.d)(Pe, {}),
                                            a = t.toJSON,
                                            i = t.fromJSON,
                                            o = (0, K.d)(Ce, {}).fromJSON;

                                        function s(t) {
                                            var i = t.host,
                                                s = a(e);
                                            return {
                                                entityFqdn: "wix.iam.cookie.v1.cookie",
                                                method: "POST",
                                                methodFqn: "wix.iam.cookie.v1.CookieService.CreateSessionCookie",
                                                url: be({
                                                    protoPath: "/v1/createSessionCookie",
                                                    data: s,
                                                    host: i
                                                }),
                                                data: s,
                                                transformResponse: o,
                                                fallback: [{
                                                    method: "POST",
                                                    url: be({
                                                        protoPath: "/v1/createSessionCookie",
                                                        data: s,
                                                        host: i
                                                    }),
                                                    data: s
                                                }]
                                            }
                                        }
                                        return s.fromReq = i, s.__isAmbassador = !0, s
                                    }({
                                        sessionToken: e,
                                        protectedPages: a
                                    }), {
                                        signedInstance: De()
                                    }).then((e => e.data)).catch((e => {
                                        throw e.response ? .data ? ? e
                                    }));
                                    await r.loadNewSession({
                                        reason: "memberLogin"
                                    }), a && (n = (0, T.FB)(t ? .protectedPages))
                                }
                                var c;
                                if (s.interactionEnded(v.sH.VERIFY_TOKEN), wt = e, Et = t ? ? await Bt.getMemberDetails(), await (c = Et, Promise.all(Object.entries(Ct).map((async ([e, t]) => {
                                        try {
                                            if ("$$$timeout$$$" === await Promise.race([t(c), (0, T.yy)(3e3).then((() => "$$$timeout$$$"))])) throw new Error(`callback ${e} timed out`)
                                        } catch (e) {
                                            s.captureError(e, {
                                                tags: {
                                                    feature: "site-members"
                                                }
                                            })
                                        }
                                    })))), i.export({
                                        memberDetails: Et
                                    }), a) return n || await Bt.authorizeMemberPagesBySignedInstance(De())
                            },
                            async authorizeMemberPagesByCookie() {
                                const e = (0, h.fU)(u) ? {
                                        headers: {
                                            cookie: `smSession=${W}`
                                        }
                                    } : void 0,
                                    {
                                        authorizedPages: t
                                    } = await yt(it, e);
                                return t
                            },
                            async authorizeMemberPagesByToken(e) {
                                if (e === W) return this.authorizeMemberPagesByCookie();
                                const {
                                    payload: t
                                } = await yt(at, {
                                    method: "POST",
                                    body: `token=${e}`
                                }), {
                                    pages: a
                                } = t;
                                return a
                            },
                            async authorizeMemberPagesBySignedInstance(e) {
                                const t = {
                                        headers: {
                                            authorization: e
                                        }
                                    },
                                    {
                                        authorizedPages: a
                                    } = await yt(it, t);
                                return a
                            },
                            async getMemberDetails(e = !1) {
                                if ((0, p.y)(s, r.getSiteMemberId(), r.getSmToken()), Et.id && !e) return Et;
                                if (!r.getSiteMemberId()) return null;
                                const t = await (I["specs.thunderbolt.preventGetMemberDetailsWaterfall"] ? (async () => {
                                    const [e, t] = await Promise.all([(0, T.hv)((async () => (await yt("/_api/members/v1/members/my?fieldsets=FULL", {
                                        headers: {
                                            authorization: r.getAppInstanceByAppDefId(X) ? ? ""
                                        }
                                    })).member), (() => null)), (0, T.hv)((async () => (await yt(`/api/wix-sm/v1/members/${r.getSiteMemberId()}/role`, {
                                        headers: {
                                            authorization: r.getAppInstanceByAppDefId(X) ? ? ""
                                        }
                                    })).role), (() => N.MEMBER))]);
                                    return e && t ? ae({
                                        member: e,
                                        role: t
                                    }) : null
                                })() : (async () => {
                                    let e;
                                    try {
                                        const t = await yt("/_api/members/v1/members/my?fieldsets=FULL", {
                                            headers: {
                                                authorization: r.getAppInstanceByAppDefId(X) ? ? ""
                                            }
                                        });
                                        e = t.member
                                    } catch (e) {
                                        return null
                                    }
                                    const {
                                        role: t
                                    } = await (0, T.hv)((() => yt(`/api/wix-sm/v1/members/${e?.id}/role`, {
                                        headers: {
                                            authorization: r.getAppInstanceByAppDefId(X) ? ? ""
                                        }
                                    })), (() => ({
                                        role: N.MEMBER
                                    })));
                                    return ae({
                                        member: e,
                                        role: t
                                    })
                                })());
                                return t ? ((e => {
                                    const t = u ? .localStorage ? .getItem ? .(v.Nr),
                                        a = JSON.stringify(e);
                                    if (t && t !== a) return ft.cachePrediction();
                                    u ? .localStorage ? .setItem ? .(v.Nr, a)
                                })(t), Et = t, i.export({
                                    memberDetails: Et
                                }), e && await (a = Et, Promise.all(Object.values(Dt).map((async e => {
                                    try {
                                        await e(a)
                                    } catch (e) {
                                        s.captureError(e, {
                                            tags: {
                                                feature: "site-members"
                                            }
                                        })
                                    }
                                })))), Et) : null;
                                var a
                            },
                            async sendForgotPasswordMail(e) {
                                return this.sendResetPasswordEmail(e)
                            },
                            async sendResetPasswordEmail(e) {
                                s.interactionStarted(v.sH.RESET_PASSWORD);
                                const t = d.userLanguage,
                                    a = {
                                        url: (0, T.g9)(ze) ? ? ze
                                    },
                                    i = JSON.stringify({
                                        language: t,
                                        email: e,
                                        redirect: a
                                    }),
                                    o = {
                                        "Content-Type": "application/json",
                                        authorization: De()
                                    };
                                await yt("/_api/iam/recovery/v1/send-email", {
                                    headers: o,
                                    method: "POST",
                                    body: i
                                }), s.interactionEnded(v.sH.RESET_PASSWORD)
                            },
                            async sendSetPasswordEmail(e, t) {
                                const a = await yt("/_api/wix-sm-webapp/members/v1/auth/members/send-set-password-email", {
                                    method: "POST",
                                    headers: {
                                        "Content-Type": "application/json",
                                        authorization: De()
                                    },
                                    body: JSON.stringify({
                                        email: e,
                                        ...t ? .hideIgnoreMessage ? {
                                            hideIgnoreMessage: t.hideIgnoreMessage
                                        } : {}
                                    })
                                });
                                return !!a ? .accepted
                            },
                            async changePassword(e, t) {
                                const a = encodeURIComponent(e),
                                    i = t.startsWith(v.Zq),
                                    o = i ? "/_api/iam/recovery/v1/recover" : st,
                                    s = i ? JSON.stringify({
                                        password: e,
                                        recovery_token: t
                                    }) : `newPassword=${a}&forgotPasswordToken=${t}`,
                                    n = i ? {
                                        "Content-Type": "application/json",
                                        authorization: De()
                                    } : void 0;
                                await yt(o, {
                                    method: "POST",
                                    headers: n,
                                    body: s
                                })
                            },
                            async sendEmailVerification(e) {
                                return this.resendEmailVerification(e)
                            },
                            async resendEmailVerification(e) {
                                await yt(`/_api/wix-sm-webapp/tokens/email/resend/${e}`)
                            },
                            async logout(e) {
                                if ((0, p.y)(s, r.getSiteMemberId(), r.getSmToken()), !Te()) return !1;
                                if (I["specs.thunderbolt.logoutOnIAM"] ? await vt.request(function(e) {
                                        var t = (0, K.d)(me, {}),
                                            a = t.toJSON,
                                            i = t.fromJSON,
                                            o = (0, K.d)(he, {}).fromJSON;

                                        function s(t) {
                                            var i = t.host,
                                                s = a(e);
                                            return {
                                                entityFqdn: "wix.iam.authentication.v1.authentication",
                                                method: "GET",
                                                methodFqn: "wix.iam.authentication.v1.AuthenticationService.Logout",
                                                url: we({
                                                    protoPath: "/v1/logout",
                                                    data: s,
                                                    host: i
                                                }),
                                                params: (0, j.bU)(s),
                                                transformResponse: o
                                            }
                                        }
                                        return s.fromReq = i, s.__isAmbassador = !0, s
                                    }({}), {
                                        signedInstance: De()
                                    }).catch((() => {
                                        f.trackEvent((0, v.SU)(v.WW.ACTIONS.LOGOUT.FAIL))
                                    })) : await yt(ot, {
                                        method: "POST"
                                    }).catch((() => {
                                        f.trackEvent((0, v.SU)(v.WW.ACTIONS.LOGOUT.FAIL))
                                    })), await Promise.all(Object.entries(bt).map((async ([e, t]) => {
                                        try {
                                            if ("$$$timeout$$$" === await Promise.race([t(), (0, T.yy)(3e3).then((() => "$$$timeout$$$"))])) throw new Error(`callback ${e} timed out`)
                                        } catch (e) {
                                            s.captureError(e, {
                                                tags: {
                                                    feature: "site-members"
                                                }
                                            })
                                        }
                                    }))), e) {
                                    const t = `./${e.replace(/^\//,"")}`;
                                    await g.navigate(t)
                                }
                                const t = await Bt.getLogoutUrl();
                                return t ? u ? .location.replace(t) : (0, h.fU)(u) || u.document.location.reload(), !(!e && !t)
                            },
                            registerToUserLogin: (e, t = (0, y.uniqueId)("callback")) => (Ct[t] = e, t),
                            unRegisterToUserLogin(e) {
                                delete Ct[e]
                            },
                            registerToMemberLogout(e) {
                                const t = (0, y.uniqueId)("logout_callback");
                                return bt[t] = e, t
                            },
                            unRegisterToMemberLogout(e) {
                                delete bt[e]
                            },
                            registerToMemberDetailsRefresh(e) {
                                const t = (0, y.uniqueId)("mdrcb");
                                return Dt[t] = e, t
                            },
                            unRegisterToMemberDetailsRefresh(e) {
                                delete Dt[e]
                            },
                            async showWelcomeDialog(e = !0) {
                                const t = {
                                        isCloseable: e,
                                        translations: qe
                                    },
                                    a = w.getParsedUrl(),
                                    i = {
                                        onCloseDialogCallback() {
                                            (0, T.Fy)(u, ze, Oe), ft.closingDialog("WelcomeDialog");
                                            const e = new URL(ze).hostname,
                                                t = 0 === e.indexOf("www") ? e.substr(3) : e;
                                            Ge("sm_ef", "/", t), Y = "", At.hideDialog(), g.navigate(a.href)
                                        },
                                        onSubmitCallback() {
                                            const e = new URL(ze).hostname,
                                                t = 0 === e.indexOf("www") ? e.substr(3) : e;
                                            Ge("sm_ef", "/", t), Y = "", At.hideDialog(), $e && g.navigate("./account/my-account"), g.navigate(a.href)
                                        }
                                    };
                                s.interactionStarted(v.sH.WELCOME_DIALOG), s.interactionEnded(v.sH.WELCOME_DIALOG), At.displayDialog("WelcomeDialog", t, i)
                            },
                            async showNoPermissionsToPageDialog(e) {
                                if (_e) {
                                    if (Be[v.$m.ACCESS_RESTRICTED]) return void g.navigate(`${Pt}${v.m2[v.$m.ACCESS_RESTRICTED]}`)
                                }
                                const t = {
                                    onCloseDialogCallback() {
                                        (0, T.Fy)(u, ze, Oe), At.hideDialog(), e && e()
                                    },
                                    onSwitchAccountLinkClick() {
                                        Bt.logout()
                                    }
                                };
                                At.displayDialog("NoPermissionsToPageDialog", {
                                    translations: qe
                                }, t)
                            },
                            async navigateToResetPasswordPage(e) {
                                if (Be[v.$m.RESET_PASSWORD]) {
                                    const t = w.getParsedUrl(),
                                        a = new URL(`${Pt}${v.m2[v.$m.RESET_PASSWORD]}`, t.origin);
                                    return t.searchParams.forEach(((e, t) => {
                                        a.searchParams.set(t, e)
                                    })), a.searchParams.set("resetPasswordToken", e), await g.navigate(a.pathname + a.search)
                                }
                                this.showResetPasswordDialog(e)
                            },
                            async showResetPasswordDialog(e) {
                                const t = () => {
                                        const e = w.getParsedUrl();
                                        return e.searchParams.delete("forgotPasswordToken"), e.searchParams.delete("forgotPasswordLang"), w.pushUrlState(e), e
                                    },
                                    a = {
                                        isCloseable: !0,
                                        isTermsOfUseNeeded: !(!dt ? .enabled || !Fe.termsOfUse),
                                        isPrivacyPolicyNeeded: !(!ut ? .enabled || !Fe.privacyPolicy),
                                        termsOfUseLink: Fe.termsOfUse,
                                        privacyPolicyLink: Fe.privacyPolicy,
                                        directionByLanguage: d.directionByLanguage,
                                        translations: qe
                                    },
                                    i = {
                                        onCloseDialogCallback() {
                                            (0, T.Fy)(u, ze, Oe), ft.closingDialog("ResetPasswordDialog");
                                            const e = t();
                                            At.hideDialog(), g.navigate(e.href)
                                        },
                                        async onSubmitCallback(i) {
                                            try {
                                                await Bt.changePassword(i, e), Bt.showNotificationDialog(qe.resetPasswordSuccessTitle, "", qe.containerOk, (async () => {
                                                    if (e.startsWith(v.Zq)) {
                                                        const e = new URL(ze).searchParams.get("redirectUrl");
                                                        if (e) return u ? .location.replace(e)
                                                    }
                                                    const a = t();
                                                    await Bt.showLoginDialog(), g.navigate(a.href)
                                                }))
                                            } catch (e) {
                                                const t = (0, T.E2)(e).toString();
                                                if (t !== v.OQ.RESET_PASSWORD_TOKEN_EXPIRED && t !== v.OQ.NEW_RESET_PASSWORD_TOKEN_EXPIRED) throw e;
                                                if (_e) {
                                                    if (Be[v.$m.EXPIRED_TOKEN]) return void await g.navigate(`${Pt}${v.m2[v.$m.EXPIRED_TOKEN]}`)
                                                }
                                                Bt.showNotificationDialog(qe.passwordHasExpiredTitle, qe.passwordHasExpiredText, qe.passwordHasExpiredOk, (() => Bt.promptForgotPassword(a.isCloseable).then((() => {
                                                    const e = w.getParsedUrl();
                                                    g.navigate(e.href)
                                                }))))
                                            }
                                        }
                                    };
                                At.displayDialog("ResetPasswordDialog", a, i)
                            },
                            async showLoggedInResetPasswordDialog() {
                                const e = {
                                        isCloseable: !0,
                                        directionByLanguage: d.directionByLanguage,
                                        translations: qe
                                    },
                                    t = {
                                        onCloseDialogCallback() {
                                            ft.closingDialog("LoggedInResetPasswordDialog"), At.hideDialog()
                                        },
                                        async onSubmitCallback() {}
                                    };
                                At.displayDialog("LoggedInResetPasswordDialog", e, t)
                            },
                            showLoginDialog: async (e = {}, t) => new Promise((async (a, i) => {
                                Bt.showLoginDialogWithExternalPromise(e, t, {
                                    resolve: a,
                                    reject: i
                                })
                            })),
                            async showLoginDialogWithExternalPromise(e = {}, t, a) {
                                const {
                                    returnPages: i,
                                    isCloseable: o,
                                    displayMode: n
                                } = {
                                    isCloseable: !0,
                                    displayMode: "fullscreen",
                                    returnPages: !1,
                                    ...e
                                }, r = await Ot.getCaptchaSettings();
                                if (Lt.setCaptchaBadgeVisibility(r.invisible.login), Ae) {
                                    const e = Be[v.$m.LOGIN];
                                    if (e) return a && kt.assignRequestAuthenticationPromise(a.resolve, a.reject), void b ? .open(e, (() => {
                                        (0, T.Fy)(u, ze, Oe), kt.rejectAuthenticationRequest(), a ? .reject(v.qd.CANCELED)
                                    })).then((() => {
                                        At.hideDialog(!0)
                                    }))
                                }
                                if (pt && b ? .isLightbox(pt)) return Bt.showCustomAuthenticationDialog(pt, i).then(a ? .resolve, a ? .reject);
                                a && kt.assignRequestAuthenticationPromise(a.resolve, a.reject);
                                const c = "Enabled" === I["specs.ShouldForceCaptchaVerificationOnLoginSpec"] || r.visible.login,
                                    [l, g] = (0, y.partition)(await Bt.getConnections(), {
                                        appDefId: v.ch.PASSWORD
                                    }),
                                    m = await Bt.getLoginUrl(),
                                    p = {
                                        bsi: Mt,
                                        displayMode: n,
                                        language: d.userLanguage,
                                        directionByLanguage: d.directionByLanguage,
                                        isCloseable: o,
                                        smCollectionId: H,
                                        svSession: te,
                                        biVisitorId: ye(),
                                        metaSiteId: He,
                                        isEmailLoginEnabled: l.length > 0,
                                        idps: g,
                                        shouldForceCaptchaVerification: !r.invisible.login && c,
                                        isSocialAuthSupported: et,
                                        serverError: t,
                                        reportBi: P.reportBi,
                                        translations: qe,
                                        externalBaseUrl: Bt.getExternalBaseUrl(),
                                        headlessRedirectUrl: m
                                    },
                                    h = {
                                        onCloseDialogCallback() {
                                            (0, T.Fy)(u, ze, Oe), At.hideDialog(), ft.closingDialog("MemberLoginDialog", n), kt.rejectAuthenticationRequest()
                                        },
                                        submit: (e, t, o) => (s.interactionStarted(v.sH.DEFAULT_LOGIN), ft.emailAuthSubmitClicked("MemberLoginDialog", n), Bt.login(e, t, o, i, void 0, !0).then((e => {
                                            s.interactionEnded(v.sH.DEFAULT_LOGIN), At.hideDialog(), a ? .resolve(e)
                                        })).catch((e => {
                                            throw (0, T.qi)(e) && s.interactionEnded(v.sH.DEFAULT_LOGIN), e
                                        }))),
                                        onForgetYourPasswordClick() {
                                            Bt.promptForgotPassword(o)
                                        },
                                        onSwitchDialogLinkClick() {
                                            Bt.showSignUpDialog({
                                                isCloseable: o,
                                                displayMode: n,
                                                returnPages: i
                                            }).then(a ? .resolve, (() => {
                                                kt.rejectAuthenticationRequest()
                                            }))
                                        },
                                        onBackendSocialLogin: (e, t) => Bt.handleSocialLoginResponse(e, t, i).then((e => {
                                            At.hideDialog(), a ? .resolve(e)
                                        })),
                                        getHostReadyPayload: () => ({
                                            visitorId: ye(),
                                            svSession: te
                                        }),
                                        openCaptcha: (0, S.V1)({
                                            captcha: R,
                                            userLanguage: d.userLanguage
                                        }),
                                        reportSocialAuthStarted: Vt
                                    };
                                ft.loginOrSignUpDialogLoaded("MemberLoginDialog", n), await At.displayDialog("MemberLoginDialog", p, h), Bt.closeCustomAuthenticationDialogs(!0)
                            },
                            async showSignUpDialog(e = {}, t) {
                                const {
                                    returnPages: a,
                                    isCloseable: i,
                                    displayMode: o
                                } = {
                                    isCloseable: !0,
                                    displayMode: "fullscreen",
                                    returnPages: !1,
                                    ...e
                                }, n = await Ot.getCaptchaSettings();
                                if (Lt.setCaptchaBadgeVisibility(n.invisible.signup), Ie) {
                                    const e = Be[v.$m.SIGN_UP];
                                    if (e) return new Promise(((t, a) => {
                                        kt.assignRequestAuthenticationPromise(t, a), b ? .open(e, (() => {
                                            (0, T.Fy)(u, ze, Oe), kt.rejectAuthenticationRequest(), a(v.qd.CANCELED)
                                        })).then((() => {
                                            At.hideDialog(!0)
                                        }))
                                    }))
                                }
                                if (mt && b ? .isLightbox(mt)) return Bt.showCustomAuthenticationDialog(mt, a);
                                const r = "Enabled" !== I["specs.ShouldPassCaptchaVerificationOnSignupSpec"] && "Enabled" === I["specs.ShouldForceCaptchaVerificationOnSignupSpec"];
                                return new Promise((async (e, c) => {
                                    const l = r || n.visible.signup && "Enabled" !== I["specs.ShouldPassCaptchaVerificationOnSignupSpec"],
                                        [g, m] = await Promise.all([Bt.getConnections(), Bt.getLoginUrl()]),
                                        [p, h] = (0, y.partition)(g, {
                                            appDefId: v.ch.PASSWORD
                                        });
                                    kt.assignRequestAuthenticationPromise(e, c);
                                    const E = {
                                            bsi: Mt,
                                            displayMode: o,
                                            language: d.userLanguage,
                                            directionByLanguage: d.directionByLanguage,
                                            isCloseable: i,
                                            smCollectionId: H,
                                            biVisitorId: ye(),
                                            svSession: te,
                                            metaSiteId: He,
                                            isSocialAuthSupported: et,
                                            isEmailLoginEnabled: p.length > 0,
                                            idps: h,
                                            isCommunityInstalled: await _t.canHavePublicMembers(),
                                            privacyNoteType: ht,
                                            joinCommunityCheckedByDefault: St,
                                            isTermsOfUseNeeded: !(!dt ? .enabled || !Fe.termsOfUse),
                                            isPrivacyPolicyNeeded: !(!ut ? .enabled || !Fe.privacyPolicy),
                                            isCodeOfConductNeeded: !(!gt ? .enabled || !Fe.codeOfConduct),
                                            shouldForceCaptchaVerification: !n.invisible.signup && l,
                                            termsOfUseLink: Fe.termsOfUse,
                                            privacyPolicyLink: Fe.privacyPolicy,
                                            codeOfConductLink: Fe.codeOfConduct,
                                            serverError: t,
                                            reportBi: P.reportBi,
                                            translations: qe,
                                            externalBaseUrl: Bt.getExternalBaseUrl(),
                                            headlessRedirectUrl: m
                                        },
                                        w = {
                                            onCloseDialogCallback() {
                                                (0, T.Fy)(u, ze, Oe), At.hideDialog(), ft.closingDialog("SignUpDialog", o), kt.rejectAuthenticationRequest()
                                            },
                                            async submit(t, i, n) {
                                                let r;
                                                if (E.isCommunityInstalled) {
                                                    r = ("boolean" == typeof n ? n : n.isCommunityChecked) ? fe.lS.PUBLIC : fe.lS.PRIVATE
                                                }
                                                const c = "boolean" == typeof n ? void 0 : n ? .recaptchaToken;
                                                return s.interactionStarted(v.sH.DEFAULT_SIGNUP), ft.emailAuthSubmitClicked("SignUpDialog", o), Bt.register(t, i, void 0, r, !0, a, c, void 0).then((t => {
                                                    s.interactionEnded(v.sH.DEFAULT_SIGNUP);
                                                    const {
                                                        member: i,
                                                        sessionToken: o,
                                                        pages: n
                                                    } = t;
                                                    o && (At.hideDialog(!0), e({
                                                        member: i,
                                                        sessionToken: o,
                                                        ...a ? {
                                                            pages: n
                                                        } : {}
                                                    }))
                                                })).catch((e => {
                                                    throw (0, T.NU)(e) && s.interactionEnded(v.sH.DEFAULT_SIGNUP), e
                                                }))
                                            },
                                            onSwitchDialogLinkClick() {
                                                Bt.showLoginDialog({
                                                    isCloseable: i,
                                                    displayMode: o,
                                                    returnPages: a
                                                }).then(e, (() => {
                                                    kt.rejectAuthenticationRequest()
                                                }))
                                            },
                                            onBackendSocialLogin: (t, i) => Bt.handleSocialLoginResponse(t, i, a).then((t => {
                                                At.hideDialog(), e(t)
                                            })),
                                            getHostReadyPayload: () => ({
                                                visitorId: ye(),
                                                svSession: te
                                            }),
                                            openCaptcha: (0, S.V1)({
                                                captcha: R,
                                                userLanguage: d.userLanguage
                                            }),
                                            reportSocialAuthStarted: Vt
                                        };
                                    ft.loginOrSignUpDialogLoaded("SignUpDialog", o), await At.displayDialog("SignUpDialog", E, w), Bt.closeCustomAuthenticationDialogs(!0)
                                }))
                            },
                            async hideAuthDialog() {
                                console.warn("hideAuthDialog is not supported")
                            },
                            async showNotificationDialog(e, t, a, i = (() => 0), o = (() => 0)) {
                                const s = {
                                        isCloseable: !0,
                                        title: e,
                                        description: t,
                                        okButtonText: a,
                                        translations: qe
                                    },
                                    n = {
                                        onCloseDialogCallback() {
                                            (0, T.Fy)(u, ze, Oe), ft.closingDialog("NotificationDialog"), At.hideDialog(), o()
                                        },
                                        onOkButtonClick() {
                                            At.hideDialog(), i()
                                        }
                                    };
                                await At.displayDialog("NotificationDialog", s, n)
                            },
                            showConfirmationEmailDialog: async (e, t = !0) => new Promise(((a, i) => {
                                const o = {
                                        isCloseable: !0,
                                        isSignUp: t,
                                        translations: qe
                                    },
                                    s = {
                                        onCloseDialogCallback() {
                                            (0, T.Fy)(u, ze, Oe), ft.closingDialog("ConfirmationEmailDialog"), At.hideDialog(), kt.rejectAuthenticationRequest(), i(v.qd.CANCELED)
                                        },
                                        async onResendConfirmationEmail() {
                                            await Bt.resendEmailVerification(e), await Bt.showConfirmationEmailDialog(e, !1).catch(i)
                                        }
                                    };
                                At.displayDialog("ConfirmationEmailDialog", o, s)
                            })),
                            showAdminApprovalDialog: async e => new Promise(((t, a) => {
                                const i = () => {
                                    (0, T.$0)(u, ze, {
                                        error: T.Mi.ACCESS_DENIED
                                    }, Oe), kt.rejectAuthenticationRequest(), a(v.qd.CANCELED), Bt.closeCustomAuthenticationDialogs(!1)
                                };
                                Bt.showNotificationDialog("", `${qe.applySuccess1} ${qe.applySuccess2}`.replace("{0}", e), qe.containerOk, i, i)
                            })),
                            async showCustomAuthenticationDialog(e, t = !1) {
                                if (!b) throw new Error("popup unavailable");
                                return new Promise((async (a, i) => {
                                    kt.assignRequestAuthenticationPromise(a, i);
                                    const o = Bt.registerToUserLogin((async () => {
                                        kt.resolveAuthenticationRequest({
                                            member: Et,
                                            sessionToken: wt,
                                            ...t ? {
                                                pages: await Bt.authorizeMemberPagesBySignedInstance(De())
                                            } : {}
                                        }), Bt.unRegisterToUserLogin(o), b.getCurrentLightboxId() === e && b.close()
                                    }), "customAuthCbId");
                                    await kt.openPopupPage(e, (() => {
                                        Bt.unRegisterToUserLogin(o)
                                    })), At.hideDialog()
                                }))
                            },
                            async closeCustomAuthenticationDialogs(e = !1) {
                                const t = b ? .getCurrentLightboxId();
                                t && [mt, pt].includes(t) && (e && kt.preventCustomPopupCloseCallback(), await b.close(), kt.allowCustomPopupCloseCallback())
                            },
                            showAdminApprovalDialogSMAuth: async (e, t) => new Promise(((a, i) => {
                                b ? .open(t, (() => {
                                    (0, T.$0)(u, ze, {
                                        error: T.Mi.ACCESS_DENIED
                                    }), kt.rejectAuthenticationRequest(), i(v.qd.CANCELED), Bt.closeCustomAuthenticationDialogs(!1)
                                }), {
                                    email: e
                                }).then((() => {
                                    At.hideDialog(!0)
                                }))
                            })),
                            async promptAdminApproval(e) {
                                const t = Be ? .[v.$m.ADMIN_APPROVAL];
                                return _e && t ? Bt.showAdminApprovalDialogSMAuth(e, t) : Bt.showAdminApprovalDialog(e)
                            },
                            async promptExpiredResetLink(e = !0) {
                                const t = Be ? .[v.$m.EXPIRED_TOKEN];
                                if (_e && t) return g.navigate(`${Pt}${v.m2[v.$m.EXPIRED_TOKEN]}`);
                                Bt.showNotificationDialog(qe.passwordHasExpiredTitle, qe.passwordHasExpiredText, qe.passwordHasExpiredOk, (() => Bt.promptForgotPassword(e).then((() => {
                                    const e = w.getParsedUrl();
                                    g.navigate(e.href)
                                }))))
                            },
                            async promptResetPassword() {
                                const e = Bt.getForgotPasswordToken();
                                if (e) {
                                    const t = Be ? .[v.$m.RESET_PASSWORD];
                                    return _e && t ? Bt.navigateToResetPasswordPage(e) : Bt.showResetPasswordDialog(e)
                                }
                            },
                            async promptEmailConfirmation() {
                                const e = a.get().emailConfirmationStateToken,
                                    t = a.get().email,
                                    i = Be ? .[v.$m.EMAIL_CONFIRMATION];
                                if (_e && i) {
                                    const o = await new Promise((o => {
                                        a.update((t => ({ ...t,
                                            emailConfirmationStateToken: e ? ? ""
                                        })));
                                        b ? .open(i, (() => {
                                            const e = a.get().emailConfirmationResponse;
                                            e.state !== fe.Gd.SUCCESS && e.state !== fe.Gd.REQUIRE_OWNER_APPROVAL && this.promptLogin({
                                                mode: "signup"
                                            }), o(e)
                                        }), {
                                            email: t
                                        }).then((() => {
                                            At.hideDialog(!0)
                                        }))
                                    }));
                                    return this.getStateMachine(o, t)
                                }
                                const o = I["specs.thunderbolt.verificationCodeDialogNewLogic"],
                                    s = e ? ? "";
                                if (o) {
                                    const e = await Bt.showVerificationCodeDialog({
                                        email: t,
                                        stateToken: s
                                    });
                                    return Bt.getStateMachine(e, t)
                                }
                                return Bt.recurciveEmailVerification(t, e).then((e => (At.hideDialog(), Bt.getStateMachine(e, t))))
                            },
                            async promptAuthPage(e, t) {
                                switch (e) {
                                    case O.EXPIRED_RESET_LINK:
                                        return Bt.promptExpiredResetLink();
                                    case O.ADMIN_APPROVAL:
                                        if ("string" != typeof t) throw new Error("Email is required for ADMIN_APPROVAL");
                                        return Bt.promptAdminApproval(t);
                                    case O.NO_PERMISSIONS:
                                        return Bt.showNoPermissionsToPageDialog(t);
                                    case O.LOGIN:
                                        return Bt.promptLogin(t);
                                    case O.FORGOT_PASSWORD:
                                        return Bt.promptForgotPassword(t);
                                    case O.RESET_PASSWORD:
                                        return Bt.promptResetPassword();
                                    case O.EMAIL_CONFIRMATION:
                                        return Bt.promptEmailConfirmation();
                                    default:
                                        throw new Error(`Unknown auth page: ${e}`)
                                }
                            },
                            getForgotPasswordToken: () => new URL((0, h.fU)(u) ? ze : u.location.href).searchParams.get("forgotPasswordToken"),
                            shouldDisplayWelcomeDialog: () => Y && $e,
                            async verifyEmail(e) {
                                try {
                                    const t = a.get().emailConfirmationStateToken,
                                        i = await vt.request(Ue({
                                            stateToken: t,
                                            code: e
                                        }), {
                                            signedInstance: De()
                                        });
                                    a.update((e => ({ ...e,
                                        emailConfirmationResponse: i ? .data
                                    })))
                                } catch (e) {
                                    throw (0, T.E2)(e.response ? .data)
                                }
                            },
                            async resendVerificationCodeEmail() {
                                ft.siteMembersEmailConfirmationOnResendCodeClick();
                                const e = a.get().emailConfirmationStateToken,
                                    t = await yt(`${nt}/v1/proceed`, {
                                        method: "POST",
                                        headers: {
                                            "Content-Type": "application/json",
                                            authorization: De()
                                        },
                                        body: JSON.stringify({
                                            stateToken: e
                                        })
                                    });
                                a.update((e => ({ ...e,
                                    emailConfirmationStateToken: t.stateToken
                                })))
                            },
                            showVerificationCodeDialog: async (e, t = !0) => new Promise((async (a, i) => {
                                s.interactionStarted(v.sH.VERIFICATION_CODE), ft.siteMembersEmailConfirmationNewMembersModalLoad(), kt.assignRequestAuthenticationPromise(a, i);
                                const o = {
                                        language: d.userLanguage,
                                        directionByLanguage: d.directionByLanguage,
                                        isCloseable: kt.config ? .isCloseable ? ? !0,
                                        displayMode: "customPopup",
                                        email: e ? .email,
                                        error: e ? .error,
                                        translations: qe,
                                        isAuthV2Enabled: !0,
                                        stateToken: e ? .stateToken,
                                        isVerificationCodeDialogNewLogic: I["specs.thunderbolt.verificationCodeDialogNewLogic"]
                                    },
                                    n = {
                                        async onResendVerificationCodeEmail() {
                                            ft.siteMembersEmailConfirmationOnResendCodeClick(), await yt(`${nt}/v1/proceed`, {
                                                method: "POST",
                                                headers: {
                                                    "Content-Type": "application/json",
                                                    authorization: De()
                                                },
                                                body: JSON.stringify({
                                                    stateToken: e.stateToken
                                                })
                                            })
                                        },
                                        onCloseDialogCallback() {
                                            ft.closingDialog("VerificationCode"), (0, T.Fy)(u, ze, Oe), At.hideDialog(), kt.rejectAuthenticationRequest(), i(v.qd.CANCELED)
                                        },
                                        async onSubmitCallback(t) {
                                            ft.siteMembersEmailConfirmationSendCodeClick();
                                            if (I["specs.thunderbolt.verificationCodeDialogNewLogic"]) try {
                                                const a = {
                                                        stateToken: e.stateToken || "",
                                                        code: t
                                                    },
                                                    i = await vt.request(Ue(a), {
                                                        signedInstance: De()
                                                    });
                                                return i ? .data
                                            } catch (e) {
                                                const t = (0, T.E2)(e.response ? .data);
                                                if (t === v.qd.CANCELED) return i(t);
                                                throw t
                                            }
                                            a(t)
                                        },
                                        onSuccessCallback: e => {
                                            At.hideDialog(), a(e)
                                        }
                                    };
                                s.interactionEnded(v.sH.VERIFICATION_CODE), At.displayDialog("VerificationCodeDialog", o, n, t)
                            })),
                            async appWillMount() {
                                F && await Bt.getMemberDetails();
                                switch (new URL(n.requestUrl).searchParams.get("showDialog")) {
                                    case "MemberLoginDialogV2":
                                        await Bt.showLoginDialogWithExternalPromise();
                                        break;
                                    case "MemberLoginDialog":
                                        Bt.showLoginDialog();
                                        break;
                                    case "SignUpDialog":
                                        Bt.showSignUpDialog();
                                        break;
                                    case "RequestPasswordResetDialog":
                                        Bt.promptForgotPassword();
                                        break;
                                    case "ResetPasswordDialog":
                                        Bt.showResetPasswordDialog("faketoken");
                                        break;
                                    case "LoggedInResetPasswordDialog":
                                        Bt.showLoggedInResetPasswordDialog();
                                        break;
                                    case "WelcomeDialog":
                                        Bt.showWelcomeDialog();
                                        break;
                                    case "NoPermissionsToPageDialog":
                                        Bt.showNoPermissionsToPageDialog();
                                        break;
                                    case "NotificationDialog":
                                        Bt.showNotificationDialog("title", "description", "ok");
                                        break;
                                    case "ConfirmationEmailDialog":
                                        Bt.showConfirmationEmailDialog("fakemember");
                                        break;
                                    case "VerificationCodeDialog":
                                        Bt.showVerificationCodeDialog({
                                            email: "testEmail@test.com"
                                        });
                                        break;
                                    case "ExpiredResetPasswordDialog":
                                        Bt.showNotificationDialog(qe.passwordHasExpiredTitle, qe.passwordHasExpiredText, qe.passwordHasExpiredOk, (() => Bt.promptForgotPassword(!1).then((() => {
                                            const e = w.getParsedUrl();
                                            g.navigate(e.href)
                                        }))))
                                }
                            },
                            pageWillUnmount({
                                pageId: e
                            }) {
                                [mt, pt].includes(e) || At.hideDialog()
                            },
                            getSocialAuthComponentProps: () => (0, T._G)({
                                config: e,
                                viewerModel: n,
                                sessionManager: r,
                                bsiManager: k,
                                handleSocialLoginResponse: Bt.handleSocialLoginResponse,
                                isSocialAuthSupported: tt,
                                captcha: R,
                                userLanguage: d.userLanguage,
                                reportBi: P.reportBi,
                                reportSocialAuthStarted: Vt,
                                useNewSocialFlow: !0,
                                translations: qe
                            }),
                            async getConnections() {
                                const e = {
                                    [v.ch.FACEBOOK]: !0,
                                    [v.ch.GOOGLE]: !0,
                                    [v.ch.APPLE]: !1
                                };
                                return Ot.getEnabledConnections(e).then((e => e.map((({
                                    id: e,
                                    appDefId: t,
                                    displayName: a
                                }) => ({
                                    id: e,
                                    appDefId: t,
                                    name: a
                                })))))
                            },
                            getLoginUrl() {
                                if (Nt && I["specs.thunderbolt.shouldFetchLoginUrlByClientId"]) return Ot.getLoginRedirectUrl()
                            },
                            getLogoutUrl() {
                                if (Nt) return Ot.getLogoutRedirectUrl()
                            },
                            getRouterPrefix: () => z,
                            getExternalBaseUrl: () => I["specs.thunderbolt.shouldUseExternalBaseUrl"] ? je : void 0,
                            async register(e, t, a, i, o, n, r, c, l) {
                                n = n ? ? !1;
                                try {
                                    const d = await Ot.getCaptchaSettings();
                                    if (d.visible.signup && "Enabled" !== I["specs.ShouldPassCaptchaVerificationOnSignupSpec"] && !r && !c ? .otp && !c ? .verificationId) throw v.pH;
                                    s.interactionStarted(v.sH.CODE_SIGNUP), f.trackEvent((0, v.SU)(v.WW.ACTIONS.SIGNUP.SUBMIT));
                                    const g = b ? .getCurrentLightboxId(),
                                        m = _.getCurrentRouteInfo() ? .pageId,
                                        p = o || mt && g && mt === g || mt && m && mt === m,
                                        h = d.invisible.signup && p ? await Tt(v.MA.SIGNUP) : void 0,
                                        S = I["specs.thunderbolt.convertBirthdateToISOString"],
                                        E = I["specs.thunderbolt.shouldMapFullContactInfoToIdentityProfile"],
                                        w = {
                                            profile: { ...(0, T.y0)(a || {}, S, E),
                                                privacyStatus: i,
                                                emails: [e]
                                            },
                                            loginId: {
                                                email: e
                                            },
                                            password: t,
                                            clientMetaData: l,
                                            captchaTokens: [...r ? [{
                                                Recaptcha: r
                                            }] : [], ...h ? [{
                                                InvisibleRecaptcha: h
                                            }] : []]
                                        },
                                        P = await vt.request(function(e) {
                                            var t = (0, K.d)(Se, {
                                                    _customField: re,
                                                    _customValue: ce,
                                                    _identityProfile: de,
                                                    _listValue: ue,
                                                    _mapValue: pe
                                                }),
                                                a = t.toJSON,
                                                i = t.fromJSON,
                                                o = (0, K.d)(Ee, {
                                                    _commonCustomValue: oe,
                                                    _commonListValue: se,
                                                    _commonMapValue: ne,
                                                    _customField: re,
                                                    _customValue: ce,
                                                    _identity: le,
                                                    _identityProfile: de,
                                                    _listValue: ue,
                                                    _mapValue: pe
                                                }).fromJSON;

                                            function s(t) {
                                                var i = t.host,
                                                    s = a(e);
                                                return {
                                                    entityFqdn: "wix.iam.authentication.v1.authentication",
                                                    method: "POST",
                                                    methodFqn: "wix.iam.authentication.v1.AuthenticationService.RegisterV2",
                                                    url: we({
                                                        protoPath: "/v2/register",
                                                        data: s,
                                                        host: i
                                                    }),
                                                    data: s,
                                                    transformResponse: o
                                                }
                                            }
                                            return s.fromReq = i, s.__isAmbassador = !0, s
                                        }(w), {
                                            signedInstance: De()
                                        }).then((e => e.data)).catch((e => {
                                            throw e.response ? .data ? ? e
                                        }));
                                    s.interactionEnded(v.sH.CODE_SIGNUP);
                                    const C = await Bt.getStateMachine(P, e),
                                        D = C ? .additionalData ? .protectedPages,
                                        y = (0, T.FB)(D),
                                        A = (0, T.$e)(C);
                                    if ((0, T.$0)(u, ze, {
                                            sessionToken: C ? .sessionToken
                                        }, Oe) && I["specs.thunderbolt.useNewPostLoginRedirect"]) return (0, T.yw)();
                                    const R = await Bt.applySessionToken(C ? .sessionToken, A, n && !y),
                                        N = y ? ? R;
                                    f.trackEvent((0, v.SU)(v.WW.ACTIONS.SIGNUP.SUCCESS)), f.trackEvent({
                                        eventName: "CompleteRegistration",
                                        params: {
                                            origin: "Site members",
                                            method: "Wix"
                                        }
                                    });
                                    const O = C ? .sessionToken;
                                    return {
                                        member: A,
                                        status: A.status,
                                        sessionToken: O,
                                        ...n && N ? {
                                            pages: N
                                        } : {}
                                    }
                                } catch (e) {
                                    throw (0, T.NU)(e) ? s.interactionEnded(v.sH.CODE_SIGNUP) : f.trackEvent((0, v.SU)(v.WW.ACTIONS.SIGNUP.FAIL)), e
                                }
                            },
                            async getStateMachine(e, t) {
                                const i = e ? .state;
                                if (i === fe.Gd.REQUIRE_OWNER_APPROVAL) {
                                    if (_e) {
                                        const e = Be[v.$m.ADMIN_APPROVAL];
                                        if (e) return new Promise(((a, i) => {
                                            b ? .open(e, (() => {
                                                (0, T.$0)(u, ze, {
                                                    error: T.Mi.ACCESS_DENIED
                                                }, Oe), kt.rejectAuthenticationRequest(), i(v.qd.CANCELED), Bt.closeCustomAuthenticationDialogs(!1)
                                            }), {
                                                email: t
                                            }).then((() => {
                                                At.hideDialog(!0)
                                            }))
                                        }))
                                    }
                                    return Bt.showAdminApprovalDialog(t)
                                }
                                if (i === fe.Gd.REQUIRE_EMAIL_VERIFICATION) {
                                    if (_e) {
                                        const i = Be[v.$m.EMAIL_CONFIRMATION];
                                        if (i) {
                                            const o = await new Promise((o => {
                                                a.update((t => ({ ...t,
                                                    emailConfirmationStateToken: e ? .stateToken ? ? ""
                                                })));
                                                b ? .open(i, (() => {
                                                    const e = a.get().emailConfirmationResponse;
                                                    e.state !== fe.Gd.SUCCESS && e.state !== fe.Gd.REQUIRE_OWNER_APPROVAL && this.promptLogin({
                                                        mode: "signup"
                                                    }), o(e)
                                                }), {
                                                    email: t
                                                }).then((() => {
                                                    At.hideDialog(!0)
                                                }))
                                            }));
                                            return this.getStateMachine(o, t)
                                        }
                                    }
                                    const i = I["specs.thunderbolt.verificationCodeDialogNewLogic"],
                                        o = e ? .stateToken ? ? "";
                                    if (i) {
                                        const e = await Bt.showVerificationCodeDialog({
                                            email: t,
                                            stateToken: o
                                        });
                                        return Bt.getStateMachine(e, t)
                                    }
                                    return Bt.recurciveEmailVerification(t, e ? .stateToken).then((e => (At.hideDialog(), Bt.getStateMachine(e, t))))
                                }
                                return e
                            },
                            async recurciveEmailVerification(e, t, a, i, o) {
                                try {
                                    const s = {
                                        stateToken: t || "",
                                        code: o ? ? await Bt.showVerificationCodeDialog({
                                            email: e,
                                            stateToken: t,
                                            error: i
                                        }, !a)
                                    };
                                    return (await vt.request(Ue(s), {
                                        signedInstance: De()
                                    })).data
                                } catch (a) {
                                    if (a === v.qd.CANCELED) throw a;
                                    const i = a ? .details ? .applicationError ? .code ? ? "BAD_CODE";
                                    return Bt.recurciveEmailVerification(e, t, !0, i)
                                }
                            },
                            async login(e, t, a, i = !1, o, s = !1) {
                                try {
                                    const n = await Ot.getCaptchaSettings();
                                    if (n.visible.login && !a ? .recaptchaToken && !o ? .otp && !o ? .verificationId) throw v.pH;
                                    f.trackEvent((0, v.SU)(v.WW.ACTIONS.LOGIN.SUBMIT));
                                    const r = b ? .getCurrentLightboxId(),
                                        c = _.getCurrentRouteInfo() ? .pageId,
                                        l = s || pt && r && pt === r || pt && c && pt === c,
                                        d = n.invisible.login && l ? await Tt(v.MA.LOGIN) : void 0,
                                        g = [];
                                    a ? .recaptchaToken && g.push({
                                        Recaptcha: a ? .recaptchaToken
                                    }), d && g.push({
                                        InvisibleRecaptcha: d
                                    });
                                    const m = {
                                            loginId: {
                                                email: e
                                            },
                                            password: t,
                                            captchaTokens: g
                                        },
                                        p = await vt.request(function(e) {
                                            var t = (0, K.d)(ge, {}),
                                                a = t.toJSON,
                                                i = t.fromJSON,
                                                o = (0, K.d)(Ee, {
                                                    _commonCustomValue: oe,
                                                    _commonListValue: se,
                                                    _commonMapValue: ne,
                                                    _customField: re,
                                                    _customValue: ce,
                                                    _identity: le,
                                                    _identityProfile: de,
                                                    _listValue: ue,
                                                    _mapValue: pe
                                                }).fromJSON;

                                            function s(t) {
                                                var i = t.host,
                                                    s = a(e);
                                                return {
                                                    entityFqdn: "wix.iam.authentication.v1.authentication",
                                                    method: "POST",
                                                    methodFqn: "wix.iam.authentication.v1.AuthenticationService.LoginV2",
                                                    url: we({
                                                        protoPath: "/v2/login",
                                                        data: s,
                                                        host: i
                                                    }),
                                                    data: s,
                                                    transformResponse: o
                                                }
                                            }
                                            return s.fromReq = i, s.__isAmbassador = !0, s
                                        }(m), {
                                            signedInstance: De()
                                        }).then((e => e.data)).catch((e => {
                                            throw e.response ? .data ? ? e
                                        })),
                                        h = await Bt.getStateMachine(p, e),
                                        S = h ? .additionalData ? .protectedPages,
                                        E = (0, T.FB)(S),
                                        w = (0, T.$e)(h);
                                    if ((0, T.$0)(u, ze, {
                                            sessionToken: h ? .sessionToken
                                        }, Oe) && I["specs.thunderbolt.useNewPostLoginRedirect"]) return (0, T.yw)();
                                    const P = await Bt.applySessionToken(h ? .sessionToken, w, i && !E),
                                        C = E ? ? P,
                                        D = h ? .sessionToken;
                                    return {
                                        sessionToken: D,
                                        member: w,
                                        ...i ? {
                                            pages: C
                                        } : {}
                                    }
                                } catch (t) {
                                    throw (0, T.qi)(t) || f.trackEvent({
                                        eventName: "CustomEvent",
                                        params: {
                                            eventCategory: "Site members",
                                            eventAction: "Log in Failure",
                                            eventLabel: "Wix"
                                        }
                                    }), t ? .details ? .applicationError ? .code === v.OQ.WAITING_APPROVAL && Bt.showAdminApprovalDialog(e), t ? .response ? .data ? ? t
                                }
                            },
                            async loginWithIdp(e, t) {
                                if ((0, h.fU)(u)) throw v.Nw;
                                Vt(e);
                                const a = await (async (e, t, a, i, o, s) => {
                                    const n = new URLSearchParams({
                                            visitorId: t,
                                            bsi: a,
                                            svSession: i,
                                            privacyStatus: xe(s),
                                            tenantType: "SITE"
                                        }),
                                        r = We(new URL(`/_api/iam/authentication/v1/sso/login/${o}/${e}`, window.location.origin), n);
                                    return await Ve(r)
                                })(e, ye(), Mt, te, He, t ? ? St);
                                return Bt.handleSocialLoginResponse(a, e, !1, !!I["specs.thunderbolt.loadNewSessionCreatesCookie"])
                            },
                            getSettings: async () => Ot.getCombinedCollectionSettings()
                        };
                    return i.export({
                        promptLogin: Bt.promptLogin,
                        logout: Bt.logout,
                        memberDetails: Et
                    }), a.update((e => ({ ...e,
                        shouldShowRenderingBlockingDialogs: e => e.relativeUrl !== v.m5 && !(!Bt.getForgotPasswordToken() && !Bt.shouldDisplayWelcomeDialog()),
                        showRenderingBlockingDialogs: () => {
                            const e = Bt.getForgotPasswordToken();
                            return e ? _e ? Bt.navigateToResetPasswordPage(e) : Bt.showResetPasswordDialog(e) : Bt.shouldDisplayWelcomeDialog() ? Bt.showWelcomeDialog() : void 0
                        }
                    }))), Bt
                }));
            var je = a(16537),
                Ke = a(60950),
                Je = a(17840);
            const ze = (0, i.Og)([_.Np], (e => ({
                    getTpaHandlers() {
                        const t = async (t, a, i) => {
                                const o = await e.getMemberDetails(!0);
                                return o ? i.appClientSpecMapData ? .isWixTPA ? {
                                    attributes: {
                                        firstName: o.firstName ? ? "",
                                        lastName: o.lastName ? ? "",
                                        privacyStatus: o.profilePrivacyStatus
                                    },
                                    name: o.memberName,
                                    email: o.loginEmail,
                                    id: o.id,
                                    owner: o.owner,
                                    status: o.status
                                } : {
                                    id: o.id,
                                    owner: o.owner,
                                    status: o.status
                                } : null
                            },
                            a = async (t, a = {}) => {
                                const {
                                    member: i
                                } = await e.promptLogin({
                                    mode: a.mode,
                                    modal: a.modal
                                });
                                return {
                                    attributes: {
                                        firstName: i.firstName ? ? "",
                                        lastName: i.lastName ? ? "",
                                        privacyStatus: i.profilePrivacyStatus
                                    },
                                    name: i.memberName,
                                    email: i.loginEmail,
                                    id: i.id,
                                    owner: i.owner,
                                    status: i.status
                                }
                            };
                        return {
                            currentMember: t,
                            smCurrentMember: t,
                            logOutCurrentMember: (0, Je.V)(["site"], ((t, a) => {
                                e.logout(a ? .url)
                            })),
                            requestLogin: (0, Je.V)(["site"], a),
                            smRequestLogin: (0, Je.V)(["site"], a)
                        }
                    }
                }))),
                Ye = (0, i.Og)([_.Np, (0, i.KT)(o.Gp, _.UU), r.Ji], ((e, {
                    componentIds: t
                }, a) => ({
                    name: "site-members-components",
                    pageWillMount() {
                        const i = t.reduce(((t, a) => ({ ...t,
                            [a]: e.getSocialAuthComponentProps()
                        })), {});
                        a.update(i)
                    }
                }))),
                Xe = (0, i.Og)([(0, i.KT)(o.wk, _.UU)], (e => ({
                    handle: async t => {
                        const {
                            shouldShowRenderingBlockingDialogs: a,
                            showRenderingBlockingDialogs: i
                        } = e.get();
                        return a(t) ? (i(), null) : t
                    }
                }))),
                Qe = e => {
                    e(_.Np, je.$.AppWillMountHandler, je.$.AppDidMountHandler).to(He), e(w.po.BlockingDialogs).to(Xe)
                },
                Ze = e => {
                    e(Ke.dQ).to(ze), e(je.$.PageWillMountHandler).to(Ye), e(je.$.PageWillUnmountHandler).to((0, i.Og)([_.Np], (e => ({
                        pageWillUnmount: t => e.pageWillUnmount(t)
                    }))))
                }
        }
    }
]);
//# sourceMappingURL=https://static.parastorage.com/services/wix-thunderbolt/dist/group_9.b1460c23.chunk.min.js.map